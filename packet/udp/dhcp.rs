use serde::{Deserialize, Serialize};
use bytes::{BufMut, BytesMut};
use hex;

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub enum MessageType {
    DHCPDiscover,
    DHCPOffer,
    DHCPRequest,
    DHCPDecline,
    DHCPAck,
    DHCPNak,
    DHCPRelease,
    DHCPInform,
}

pub trait DHCPBytes {
    fn to_bytes(&self) -> BytesMut;
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DHCPDiscover {
    pub xid: [u8; 4],
    // mac: [u8; 6],
    pub mac: String,
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPOffer {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPRequest {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPDecline {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPAck {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPNak {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPRelease {
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize)]
pub struct DHCPInform {
}

impl DHCPBytes for DHCPDiscover {
    fn to_bytes(&self) -> BytesMut {
        let mac: Vec<_> = self.mac.split(":")
                    .flat_map(|pair| hex::decode(pair).expect("MAC address contains unexpected characters"))
                    .collect();
        let mut dicover_bytes = BytesMut::new();
        dicover_bytes.extend(&[0x01, 0x01]);
        dicover_bytes.put_u8(mac.len() as u8);
        dicover_bytes.put_u8(0x00);
        // 0x99, 0xc0, 0xcd, 0x35 - xid
        dicover_bytes.extend(self.xid);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        // 0x08, 0x00, 0x27, 0x0f, 0xbe, 0x55
        dicover_bytes.extend(mac.as_slice());
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63]);
        // dicover_bytes.extend(&[0x35, 0x01, 0x01, 0x3d, 0x07, 0x01, 0x08, 0x00, 0x27, 0x0f, 0xbe, 0x55, 0x32, 0x04, 0xc0, 0xa8]);
        dicover_bytes.extend(&[0x35, 0x01, 0x01, 0x3d, 0x07, 0x01]);
        dicover_bytes.put_slice(mac.as_slice());
        // 0x32, 0x04, 0xc0, 0xa8, 0x38, 0x66
        dicover_bytes.extend(&[0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);    // requested IP address
        dicover_bytes.extend(&[0x0c, 0x0f, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x2d, 0x52, 0x41, 0x44, 0x44]);
        dicover_bytes.extend(&[0x4c, 0x4a, 0x45, 0x3c, 0x08, 0x4d, 0x53, 0x46, 0x54, 0x20, 0x35, 0x2e, 0x30, 0x37, 0x0e, 0x01]);
        dicover_bytes.extend(&[0x03, 0x06, 0x0f, 0x1f, 0x21, 0x2b, 0x2c, 0x2e, 0x2f, 0x77, 0x79, 0xf9, 0xfc, 0xff]);
        dicover_bytes
    }
}
